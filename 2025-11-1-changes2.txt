================================================================================
2025-11-01 変更履歴 #2
4足歩行ゴールキーパーロボット - Phase 1完了 & Phase 2進行中
================================================================================

■ 実施日時
2025年11月1日

■ 概要
Phase 1（カメラセットアップ）完了
Phase 2（TPU動作確認）を進行中
リアルタイムボール検出システムの実装


================================================================================
【Phase 1: カメラセットアップ - 完了】
================================================================================

✅ 達成項目
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Camera Module 3 の動作確認
   -------------------------
   - センサー: IMX708
   - 解像度: 640x480
   - 実測FPS: 43.89 FPS（目標30 FPSを大幅に上回る）
   - フォーマット: RGB888

2. Webストリーミング機能
   ---------------------
   - MJPEGストリーミングサーバー実装
   - ブラウザからリアルタイム映像確認可能
   - アクセスURL: http://192.168.0.11:8000
   - タイトル表示バグ修正（UTF-8エンコーディング対応）

3. テスト結果
   ---------
   tests/test_camera.py実行結果:
   - ✅ カメラ初期化: PASSED
   - ✅ 開始/停止: PASSED
   - ✅ フレームキャプチャ: PASSED (43.89 FPS)
   - ✅ コンテキストマネージャー: PASSED
   - ⚠️ カメラ情報取得: FAILED（軽微なバグ、影響なし）

   総合評価: 4/5 PASSED


================================================================================
【Phase 2: TPU動作確認 - 進行中】
================================================================================

✅ 完了した作業
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Google Coral TPU接続確認
   -------------------------
   デバイス確認:
   ```
   Bus 002 Device 002: ID 1a6e:089a Global Unichip Corp.
   ```
   ✅ TPUは正常にUSB接続されている

2. Edge TPUランタイムのインストール
   ---------------------------------
   インストール済みパッケージ:
   - libedgetpu1-std (v16.0)
   - リポジトリ: https://packages.cloud.google.com/apt coral-edgetpu-stable

   libedgetpu動作確認:
   ```python
   from ctypes import CDLL
   lib = CDLL('libedgetpu.so.1')
   # ✅ 正常にロード可能
   ```

3. TensorFlowのインストール
   -------------------------
   - TensorFlow 2.20.0（259.7 MB）
   - tensorflow.lite モジュール使用可能

4. COCOモデルのダウンロード
   ------------------------
   ダウンロード済みモデル:
   - models/ssd_mobilenet_v2_coco_quant_postprocess_edgetpu.tflite (6.6MB)
     → TPU加速版
   - models/ssd_mobilenet_v2_coco_quant_postprocess.tflite (6.1MB)
     → CPU版（現在使用中）
   - models/coco_labels.txt
     → クラスラベル（80クラス、sports ball = class 37）

5. TFLiteラッパーの実装
   ---------------------
   作成ファイル: src/detection/tflite_wrapper.py
   機能:
   - TensorFlow Liteインタプリタのラッパー
   - Edge TPU delegate対応（互換性問題あり）
   - オブジェクト検出インターフェース

6. リアルタイムボール検出システムの実装
   ------------------------------------
   作成ファイル: scripts/camera_stream_with_detection.py

   機能:
   - カメラ映像のリアルタイムストリーミング
   - オブジェクト検出（COCO 80クラス）
   - ボール検出（sports ball - class 37）
   - バウンディングボックス描画
     - 赤枠: スポーツボール
     - 緑枠: その他のオブジェクト
   - FPS表示
   - 検出統計（総検出数、ボール検出数）

7. テスト実行と検証
   ---------------
   tests/test_tpu_simple.py実行結果（CPU版）:
   - 総フレーム数: 10
   - 総検出数: 36オブジェクト
   - 平均推論時間: 160.4ms
   - FPS: 約6 FPS（CPU版のため低速）

   リアルタイムストリーミング検証:
   - ✅ バレーボール検出成功（sports ball - class 37）
   - ✅ バウンディングボックス表示正常
   - FPS: 約15 FPS（検出頻度を1/3に削減して改善）


⚠️ 未解決の課題
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Edge TPU Delegate の読み込み失敗
   ---------------------------------
   問題:
   TensorFlow 2.20でEdge TPU delegateが正常に読み込めない

   エラーメッセージ:
   ```
   Edge TPU delegate failed: Failed to load delegate from libedgetpu.so.1
   Encountered unresolved custom op: edgetpu-custom-op
   ```

   試行した解決策:
   ❌ TensorFlow 2.16へのダウングレード
      → ARM64版が利用不可

   ❌ tflite-runtime-2.5.0（prebuilt wheel）
      → Python 3.13非対応（Python 3.9用）

   ❌ tf.lite.experimental.load_delegate()
      → delegate読み込み失敗

   ❌ tensorflow.lite.python.interpreter.load_delegate()
      → 同様に失敗

   根本原因:
   - TensorFlow 2.20でTFLite APIが大幅変更
   - load_delegate()が非推奨化
   - LiteRTへの移行が推奨されているが、ARM64版未リリース
   - Python 3.13が新しすぎて古いtflite-runtimeと互換性なし

2. パフォーマンスの制限
   -------------------
   CPU版での実測値:
   - 推論時間: 160ms/フレーム
   - FPS: 6-15 FPS（検出頻度による）
   - 動くボールの検出: 困難（FPS不足）

   TPU版での期待値:
   - 推論時間: <20ms/フレーム（目標）
   - FPS: 30+ FPS
   - 動くボールの検出: 可能


================================================================================
【現在の動作状況】
================================================================================

✅ 正常に動作している機能
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. カメラ映像のストリーミング
   - URL: http://192.168.0.11:8000
   - 解像度: 640x480
   - リアルタイム表示

2. オブジェクト検出（CPU版）
   - COCOモデルによる80クラス検出
   - バウンディングボックス表示
   - クラスID表示
   - 信頼度スコア表示

3. ボール検出
   - バレーボール: 正しくsports ball（class 37）として検出
   - 静止ボール: 安定して検出可能
   - 検出閾値: 0.6（60%以上の信頼度）

⚠️ 制限事項
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 動くボールの検出が困難
   理由: CPU版のFPS不足（15 FPS）

2. ブラウザ統計表示が更新されない
   原因: JavaScriptの統計取得機能
   状態: APIは正常動作（curl確認済み）
   回避策: CORSヘッダー追加済み（要ブラウザ強制再読み込み）


================================================================================
【作成・変更ファイル一覧】
================================================================================

[Phase 1関連]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  ✅ scripts/check_camera.py
     - カメラ接続確認スクリプト

  ✅ scripts/camera_stream.py（修正済み）
     - Webストリーミングサーバー
     - UTF-8エンコーディング対応
     - タイトル変更: "RaspberryPi Camera Module3"

  ✅ scripts/camera_preview.py
     - OpenCVプレビュー版

  ✅ docs/camera-setup.txt
     - 完全セットアップガイド（300行超）

  ✅ 2025-11-1-phase1-complete.txt
     - Phase 1完了報告書

[Phase 2関連]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  ✅ src/detection/tflite_wrapper.py（新規作成）
     - TFLiteインタプリタラッパー
     - Edge TPU delegate対応（互換性問題あり）
     - detect_objects()メソッド実装

  ✅ scripts/test_tpu_simple.py（新規作成）
     - TPU検出テストスクリプト
     - 10フレームテスト
     - FPS・推論時間計測

  ✅ scripts/camera_stream_with_detection.py（新規作成）
     - リアルタイムボール検出ストリーミング
     - バウンディングボックス描画
     - 統計表示（FPS、総検出数、ボール検出数）
     - クラスID表示機能

[モデルファイル]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  ✅ models/ssd_mobilenet_v2_coco_quant_postprocess_edgetpu.tflite
     - Edge TPU最適化版（6.6MB）

  ✅ models/ssd_mobilenet_v2_coco_quant_postprocess.tflite
     - CPU版（6.1MB）

  ✅ models/coco_labels.txt
     - クラスラベル（80クラス）


================================================================================
【システム構成】
================================================================================

ハードウェア
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  - Raspberry Pi 4 Model B (8GB RAM)
  - Raspberry Pi Camera Module 3 (IMX708)
  - Google Coral TPU USB Accelerator
  - ネットワーク: 192.168.0.11

ソフトウェア環境
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  OS:
  - Raspberry Pi OS (Debian Trixie, 64-bit)
  - Kernel: Linux 6.x

  Python環境:
  - Python 3.13.5
  - picamera2: 0.3.31-1
  - OpenCV: 4.10.0+dfsg-5
  - NumPy: 2.2.4
  - TensorFlow: 2.20.0

  Edge TPU:
  - libedgetpu1-std: 16.0
  - libcamera: v0.5.2+99-bfd68f78


================================================================================
【パフォーマンス測定結果】
================================================================================

Phase 1: カメラ性能
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  項目                | 目標      | 実測      | 達成率
  ────────────────────┼───────────┼───────────┼─────
  フレームレート      | 30 FPS    | 43.89 FPS | 146%
  解像度              | 640x480   | 640x480   | 100%
  初期化時間          | <1秒      | ~0.2秒    | ✅
  CPU使用率           | <50%      | ~30%      | ✅
  メモリ使用量        | <500MB    | ~200MB    | ✅

Phase 2: 検出性能（CPU版）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  項目                | 目標      | 実測      | 状態
  ────────────────────┼───────────┼───────────┼─────
  推論時間            | <20ms     | 160.4ms   | ❌
  検出FPS             | 30 FPS    | 6-15 FPS  | ❌
  ボール検出          | 動作      | 動作      | ✅
  静止ボール検出      | -         | 安定      | ✅
  動くボール検出      | -         | 困難      | ❌

Phase 2: 期待性能（TPU版 - 未実現）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  項目                | 期待値
  ────────────────────┼───────────
  推論時間            | <20ms
  検出FPS             | 30+ FPS
  動くボール検出      | 可能


================================================================================
【重要な技術的知見】
================================================================================

1. Camera Module 3の設定
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   /boot/firmware/config.txtで明示的設定が必須:
   ```
   camera_auto_detect=0
   dtoverlay=imx708
   ```
   ※自動検出では正しく認識されない

2. picamera2の使用
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   - 旧picamera（非推奨）ではなくpicamera2を使用
   - libcameraベース
   - Python 3.13対応

3. Edge TPU Delegateの互換性問題
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   【問題の構造】

   TensorFlow 2.20の変更:
   - tf.lite.Interpreter → 非推奨
   - LiteRTへの移行推奨
   - しかしLiteRTのARM64版が未リリース

   Python 3.13の問題:
   - 古いtflite-runtime (2.5.0) が非対応
   - prebuilt wheelがPython 3.9まで

   libedgetpu自体は正常:
   - USB認識: ✅
   - ライブラリロード: ✅
   - delegateインターフェース: ❌

   【今後の調査方向】

   Option 1: LiteRT（ai-edge-litert）
   - TensorFlow 2.20で推奨される新しいランタイム
   - ARM64版のリリース待ち
   - URL: https://ai.google.dev/edge/litert/migration

   Option 2: Python 3.9環境構築
   - venv等で別環境を作成
   - tflite-runtime-2.5.0を使用
   - システムPythonとの共存

   Option 3: カスタムビルド
   - TensorFlow Liteをソースからビルド
   - Edge TPU delegate対応を明示的に有効化
   - ビルド時間: 数時間

   Option 4: PyCoral
   - Google公式のPythonラッパー
   - 依存関係が複雑（GDAL等）
   - インストール失敗経験あり

4. COCO Dataset
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   sports ball (class 37)の検出対象:
   - サッカーボール
   - バスケットボール
   - バレーボール ✅（検証済み）
   - テニスボール
   - 野球ボール
   など

5. 検出パフォーマンスの最適化
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   CPU版での工夫:
   - 検出頻度を削減（3フレームに1回）→ FPS向上
   - 検出閾値を調整（0.6）→ 誤検出削減
   - 最後の検出結果を保持 → 描画の一貫性

   TPU版で期待される改善:
   - 毎フレーム検出可能
   - 低閾値（0.3-0.4）でも実用的
   - 動くオブジェクトの追跡が可能


================================================================================
【次のステップ・TODO】
================================================================================

最優先: Edge TPU加速の有効化
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

□ TPU delegate問題の解決

  調査項目:
  1. LiteRT (ai-edge-litert)の最新状況確認
     - ARM64版リリース状況
     - インストール方法

  2. Python 3.9仮想環境の構築
     ```bash
     # Python 3.9インストール
     sudo apt install python3.9 python3.9-venv

     # 仮想環境作成
     python3.9 -m venv ~/tpu_env
     source ~/tpu_env/bin/activate

     # tflite-runtime インストール
     pip install \
       https://github.com/google-coral/pycoral/releases/download/v2.0.0/tflite_runtime-2.5.0.post1-cp39-cp39-linux_aarch64.whl
     ```

  3. TensorFlow Lite カスタムビルド
     - ビルド手順の確認
     - 所要時間の見積もり

  4. 代替ハードウェアアクセラレーション
     - Raspberry Pi 4のGPU活用
     - NNAPI (Android Neural Networks API)

□ パフォーマンステスト

  TPU有効化後の確認項目:
  - 推論時間 < 20ms
  - FPS > 30
  - 動くボールの検出成功率
  - CPU使用率
  - 電力消費

Phase 3以降（TPU解決後）
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

□ Phase 3: Arduino連携
  - シリアル通信確立
  - サーボ制御
  - 超音波センサー統合

□ Phase 4: リアルタイムボール検出
  - TPU加速版での安定動作

□ Phase 5: カメラ追従制御
  - PID制御実装
  - サーボでボール追従

□ Phase 6: 2D位置マッピング
  - 角度 + 距離 → 座標変換

□ Phase 7: 軌道予測
  - カルマンフィルタ
  - 着地点予測

□ Phase 8: 統合テスト


================================================================================
【参考情報】
================================================================================

ドキュメント
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  - docs/camera-setup.txt - カメラ完全セットアップガイド
  - 2025-11-1-phase1-complete.txt - Phase 1完了報告
  - blueprint.txt - プロジェクト全体設計
  - CLAUDE.md - AI開発ガイド

外部リンク
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  Google Coral:
  - https://coral.ai/
  - https://coral.ai/docs/edgetpu/compiler/

  TensorFlow Lite:
  - https://www.tensorflow.org/lite
  - https://ai.google.dev/edge/litert/migration

  LiteRT Migration:
  - https://ai.google.dev/edge/litert/migration

  COCO Dataset:
  - https://cocodataset.org/

  Camera Module 3:
  - https://www.raspberrypi.com/products/camera-module-3/

  picamera2:
  - https://datasheets.raspberrypi.com/camera/picamera2-manual.pdf

コマンドリファレンス
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  カメラストリーミング起動:
  ```bash
  python3 scripts/camera_stream.py
  ```

  ボール検出ストリーミング起動:
  ```bash
  python3 scripts/camera_stream_with_detection.py
  ```

  TPUテスト:
  ```bash
  python3 scripts/test_tpu_simple.py
  ```

  統計確認:
  ```bash
  curl http://localhost:8000/stats
  ```

  TPU接続確認:
  ```bash
  lsusb | grep "Global Unichip"
  ```


================================================================================
【トラブルシューティング】
================================================================================

問題: ブラウザで統計が0のまま
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  確認:
  ```bash
  curl http://localhost:8000/stats
  ```

  正常な場合の出力例:
  ```json
  {"fps": 14.99, "total_detections": 433, "ball_detections": 107}
  ```

  対処:
  - ブラウザで強制再読み込み（Ctrl+Shift+R）
  - ブラウザのキャッシュクリア
  - 別のブラウザで試す

問題: カメラが使用中エラー
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  ```
  RuntimeError: Failed to acquire camera: Device or resource busy
  ```

  対処:
  ```bash
  ps aux | grep camera_stream
  # 該当プロセスをkill
  kill <PID>
  ```

問題: TPU delegateが読み込めない
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  現状:
  - TensorFlow 2.20との互換性問題
  - LiteRT移行が必要

  暫定対処:
  - CPU版モデルを使用
  - 検出頻度を調整してFPS改善


================================================================================
【プロジェクト進捗】
================================================================================

全8フェーズ中、Phase 1完了、Phase 2進行中

[██████████████████████] Phase 1: カメラセットアップ      100% ✅
[████████████░░░░░░░░░░] Phase 2: TPU動作確認             60%  🔄
[░░░░░░░░░░░░░░░░░░░░░░] Phase 3: Arduino連携              0%  ⏸️
[░░░░░░░░░░░░░░░░░░░░░░] Phase 4: リアルタイム検出         0%  ⏸️
[░░░░░░░░░░░░░░░░░░░░░░] Phase 5: カメラ追従制御           0%  ⏸️
[░░░░░░░░░░░░░░░░░░░░░░] Phase 6: 2D位置マッピング         0%  ⏸️
[░░░░░░░░░░░░░░░░░░░░░░] Phase 7: 軌道予測                 0%  ⏸️
[░░░░░░░░░░░░░░░░░░░░░░] Phase 8: 統合テスト               0%  ⏸️

全体進捗: 約20% (Phase 1完了 + Phase 2部分完了)


================================================================================
【検出実績】
================================================================================

テスト対象: バレーボール

検出結果:
  ✅ 静止状態: 安定して検出
  ✅ クラス分類: sports ball (class 37) - 正確
  ✅ バウンディングボックス: 正常表示
  ✅ 信頼度スコア: 0.6以上で安定
  ⚠️ 動いている状態: 検出困難（FPS不足）

統計（リアルタイムストリーミング）:
  - FPS: 14.99
  - 総検出数: 400+
  - ボール検出数: 100+


================================================================================
作成者: Claude Code & Human Collaboration
最終更新: 2025年11月1日 12:00
ステータス: Phase 2進行中（TPU加速化待ち）
================================================================================
